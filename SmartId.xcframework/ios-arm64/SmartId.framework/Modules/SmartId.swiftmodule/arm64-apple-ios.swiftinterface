// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SmartId
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import CoreTelephony
import Darwin
import Foundation
import KeychainAccess
import Security
@_exported import SmartId
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct BankAccount : Swift.Codable {
  public let account: Swift.String
  public let bank: Swift.String
  public let currency: Swift.String
  public init(account: Swift.String, bank: Swift.String, currency: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CoreOperation : Swift.Codable {
  public let channelId: Swift.String
  public var device: SmartId.Device?
  public let transaction: SmartId.Transaction?
  public var account: SmartId.Account?
  public let accountTo: SmartId.Account?
  public let debitFrom: SmartId.BankAccount?
  public let creditTo: SmartId.BankAccount?
  public let creditCard: SmartId.CreditCard?
  public let order: SmartId.Order?
  public let timestamp: Swift.String?
  public init(channelId: Swift.String, device: SmartId.Device? = nil, transaction: SmartId.Transaction? = nil, account: SmartId.Account? = nil, accountTo: SmartId.Account? = nil, debitFrom: SmartId.BankAccount? = nil, creditTo: SmartId.BankAccount? = nil, creditCard: SmartId.CreditCard? = nil, order: SmartId.Order? = nil, timestamp: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Transaction : Swift.Codable {
  public let category: Swift.String
  public let type: Swift.String
  public let description: Swift.String
  public let reference: Swift.String
  public let date: Swift.String?
  public let details: [Swift.String : Swift.String]
  public init(category: Swift.String, type: Swift.String, description: Swift.String, reference: Swift.String, date: Swift.String? = nil, details: [Swift.String : Swift.String])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Account : Swift.Codable {
  public var client: Swift.String
  public let clientRefId: Swift.Int
  public let clientRefIdStr: Swift.String
  public let email: Swift.String
  public let phoneNumber: Swift.String
  public let session: Swift.String
  public let accountNumber: Swift.String
  public let bank: Swift.String
  public init(client: Swift.String, clientRefId: Swift.Int, clientRefIdStr: Swift.String, email: Swift.String, phoneNumber: Swift.String, session: Swift.String, accountNumber: Swift.String, bank: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias Padding = Security.SecPadding
@_hasMissingDesignatedInitializers final public class SID {
  public static let shared: SmartId.SID
  public static func startLocation()
  public static func startPharming(applicationBackendDomain: Swift.String = "")
  public static func start(license: Swift.String, username: Swift.String, isProduction: Swift.Bool)
  public static func setSSLData(_ data: Swift.String)
  final public func link(channel: Swift.String, session: Swift.String)
  final public func tracking(channel: Swift.String, session: Swift.String, action: Swift.String, transaction: Swift.String = "", value: Swift.String = "")
  final public func unlink(channel: Swift.String, session: Swift.String)
  final public func getDevice() -> Swift.String?
  final public func getDeviceInfo(channel: Swift.String, session: Swift.String) -> [Swift.String : Any]
  final public func getDeviceData() -> SmartId.DeviceDataResponse
  final public func getRawData() -> SmartId.RawDataResponse
  final public func securePayment(channel: Swift.String, transactionType: Swift.String = "", amount: Swift.String, values: [Swift.String : Swift.String])
  final public func createOperation(channel: Swift.String, operation: SmartId.CoreOperation)
  @objc deinit
}
public struct Device : Swift.Codable {
  public let smartId: Swift.String
  public let ipAddress: Swift.String?
  public let userAgent: Swift.String?
  public init(smartId: Swift.String, ipAddress: Swift.String? = nil, userAgent: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class DeviceDataResponse {
  public func setTimeout(timeout: Swift.Int) -> SmartId.DeviceDataResponse
  public func onSuccess(success: @escaping (Swift.Int, Swift.String, Swift.Bool) -> Swift.Void) -> SmartId.DeviceDataResponse
  public func onFailure(failure: @escaping (Swift.Int, Swift.String, Swift.String) -> Swift.Void) -> SmartId.DeviceDataResponse
  public func start()
  @objc deinit
}
public struct CreditCard : Swift.Codable {
  public let bin: Swift.String
  public let hash: Swift.String
  public let last4Digits: Swift.String
  public let token: Swift.String
  public init(bin: Swift.String, hash: Swift.String, last4Digits: Swift.String, token: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Order : Swift.Codable {
  public let amount: Foundation.Decimal
  public let currency: Swift.String
  public init(amount: Foundation.Decimal, currency: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public func MD5(_ input: Swift.String) -> Swift.String
@_hasMissingDesignatedInitializers public class RawDataResponse {
  public func onSuccess(success: @escaping (Swift.Int, Swift.String) -> Swift.Void) -> SmartId.RawDataResponse
  public func onFailure(failure: @escaping (Swift.Int, Swift.String, Swift.String) -> Swift.Void) -> SmartId.RawDataResponse
  public func start()
  @objc deinit
}
